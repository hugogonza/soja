// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.soja.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.soja.domain.LecturaComposicionCorporal;
import com.soja.domain.Persona;
import com.soja.domain.QLecturaComposicionCorporal;
import com.soja.repository.LecturaComposicionCorporalRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect LecturaComposicionCorporalRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: LecturaComposicionCorporalRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.PERSONA = "persona";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.FECHA_HORA_EVALUACION = "fechaHoraEvaluacion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.ESTATURA = "estatura";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.PESO = "peso";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.IMC = "imc";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.PORCENTAJE_GRASA_CORPORAL = "porcentajeGrasaCorporal";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.MASA_MAGRA = "masaMagra";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.PORCENTAJE_AGUA_CORPORAL = "porcentajeAguaCorporal";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.GRASA_VISCERAL = "grasaVisceral";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.CIRCUNFERENCIA_CINTURA = "circunferenciaCintura";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.CIRCUNFERENCIA_CADERA = "circunferenciaCadera";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.INDICE_CINTURA_CADERA = "indiceCinturaCadera";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LecturaComposicionCorporalRepositoryImpl.CIRCUNFERENCIA_MUNECA = "circunferenciaMuneca";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LecturaComposicionCorporal> LecturaComposicionCorporalRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QLecturaComposicionCorporal lecturaComposicionCorporal = QLecturaComposicionCorporal.lecturaComposicionCorporal;
        
        JPQLQuery<LecturaComposicionCorporal> query = from(lecturaComposicionCorporal);
        
        Path<?>[] paths = new Path<?>[] {lecturaComposicionCorporal.persona,lecturaComposicionCorporal.fechaHoraEvaluacion,lecturaComposicionCorporal.estatura,lecturaComposicionCorporal.peso,lecturaComposicionCorporal.imc,lecturaComposicionCorporal.porcentajeGrasaCorporal,lecturaComposicionCorporal.masaMagra,lecturaComposicionCorporal.porcentajeAguaCorporal,lecturaComposicionCorporal.grasaVisceral,lecturaComposicionCorporal.circunferenciaCintura,lecturaComposicionCorporal.circunferenciaCadera,lecturaComposicionCorporal.indiceCinturaCadera,lecturaComposicionCorporal.circunferenciaMuneca};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PERSONA, lecturaComposicionCorporal.persona)
			.map(FECHA_HORA_EVALUACION, lecturaComposicionCorporal.fechaHoraEvaluacion)
			.map(ESTATURA, lecturaComposicionCorporal.estatura)
			.map(PESO, lecturaComposicionCorporal.peso)
			.map(IMC, lecturaComposicionCorporal.imc)
			.map(PORCENTAJE_GRASA_CORPORAL, lecturaComposicionCorporal.porcentajeGrasaCorporal)
			.map(MASA_MAGRA, lecturaComposicionCorporal.masaMagra)
			.map(PORCENTAJE_AGUA_CORPORAL, lecturaComposicionCorporal.porcentajeAguaCorporal)
			.map(GRASA_VISCERAL, lecturaComposicionCorporal.grasaVisceral)
			.map(CIRCUNFERENCIA_CINTURA, lecturaComposicionCorporal.circunferenciaCintura)
			.map(CIRCUNFERENCIA_CADERA, lecturaComposicionCorporal.circunferenciaCadera)
			.map(INDICE_CINTURA_CADERA, lecturaComposicionCorporal.indiceCinturaCadera)
			.map(CIRCUNFERENCIA_MUNECA, lecturaComposicionCorporal.circunferenciaMuneca);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lecturaComposicionCorporal);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LecturaComposicionCorporal> LecturaComposicionCorporalRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QLecturaComposicionCorporal lecturaComposicionCorporal = QLecturaComposicionCorporal.lecturaComposicionCorporal;
        
        JPQLQuery<LecturaComposicionCorporal> query = from(lecturaComposicionCorporal);
        
        Path<?>[] paths = new Path<?>[] {lecturaComposicionCorporal.persona,lecturaComposicionCorporal.fechaHoraEvaluacion,lecturaComposicionCorporal.estatura,lecturaComposicionCorporal.peso,lecturaComposicionCorporal.imc,lecturaComposicionCorporal.porcentajeGrasaCorporal,lecturaComposicionCorporal.masaMagra,lecturaComposicionCorporal.porcentajeAguaCorporal,lecturaComposicionCorporal.grasaVisceral,lecturaComposicionCorporal.circunferenciaCintura,lecturaComposicionCorporal.circunferenciaCadera,lecturaComposicionCorporal.indiceCinturaCadera,lecturaComposicionCorporal.circunferenciaMuneca};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(lecturaComposicionCorporal.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PERSONA, lecturaComposicionCorporal.persona)
			.map(FECHA_HORA_EVALUACION, lecturaComposicionCorporal.fechaHoraEvaluacion)
			.map(ESTATURA, lecturaComposicionCorporal.estatura)
			.map(PESO, lecturaComposicionCorporal.peso)
			.map(IMC, lecturaComposicionCorporal.imc)
			.map(PORCENTAJE_GRASA_CORPORAL, lecturaComposicionCorporal.porcentajeGrasaCorporal)
			.map(MASA_MAGRA, lecturaComposicionCorporal.masaMagra)
			.map(PORCENTAJE_AGUA_CORPORAL, lecturaComposicionCorporal.porcentajeAguaCorporal)
			.map(GRASA_VISCERAL, lecturaComposicionCorporal.grasaVisceral)
			.map(CIRCUNFERENCIA_CINTURA, lecturaComposicionCorporal.circunferenciaCintura)
			.map(CIRCUNFERENCIA_CADERA, lecturaComposicionCorporal.circunferenciaCadera)
			.map(INDICE_CINTURA_CADERA, lecturaComposicionCorporal.indiceCinturaCadera)
			.map(CIRCUNFERENCIA_MUNECA, lecturaComposicionCorporal.circunferenciaMuneca);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lecturaComposicionCorporal);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param persona
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LecturaComposicionCorporal> LecturaComposicionCorporalRepositoryImpl.findByPersona(Persona persona, GlobalSearch globalSearch, Pageable pageable) {
        
        QLecturaComposicionCorporal lecturaComposicionCorporal = QLecturaComposicionCorporal.lecturaComposicionCorporal;
        
        JPQLQuery<LecturaComposicionCorporal> query = from(lecturaComposicionCorporal);
        
        Assert.notNull(persona, "persona is required");
        
        query.where(lecturaComposicionCorporal.persona.eq(persona));
        Path<?>[] paths = new Path<?>[] {lecturaComposicionCorporal.persona,lecturaComposicionCorporal.fechaHoraEvaluacion,lecturaComposicionCorporal.estatura,lecturaComposicionCorporal.peso,lecturaComposicionCorporal.imc,lecturaComposicionCorporal.porcentajeGrasaCorporal,lecturaComposicionCorporal.masaMagra,lecturaComposicionCorporal.porcentajeAguaCorporal,lecturaComposicionCorporal.grasaVisceral,lecturaComposicionCorporal.circunferenciaCintura,lecturaComposicionCorporal.circunferenciaCadera,lecturaComposicionCorporal.indiceCinturaCadera,lecturaComposicionCorporal.circunferenciaMuneca};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PERSONA, lecturaComposicionCorporal.persona)
			.map(FECHA_HORA_EVALUACION, lecturaComposicionCorporal.fechaHoraEvaluacion)
			.map(ESTATURA, lecturaComposicionCorporal.estatura)
			.map(PESO, lecturaComposicionCorporal.peso)
			.map(IMC, lecturaComposicionCorporal.imc)
			.map(PORCENTAJE_GRASA_CORPORAL, lecturaComposicionCorporal.porcentajeGrasaCorporal)
			.map(MASA_MAGRA, lecturaComposicionCorporal.masaMagra)
			.map(PORCENTAJE_AGUA_CORPORAL, lecturaComposicionCorporal.porcentajeAguaCorporal)
			.map(GRASA_VISCERAL, lecturaComposicionCorporal.grasaVisceral)
			.map(CIRCUNFERENCIA_CINTURA, lecturaComposicionCorporal.circunferenciaCintura)
			.map(CIRCUNFERENCIA_CADERA, lecturaComposicionCorporal.circunferenciaCadera)
			.map(INDICE_CINTURA_CADERA, lecturaComposicionCorporal.indiceCinturaCadera)
			.map(CIRCUNFERENCIA_MUNECA, lecturaComposicionCorporal.circunferenciaMuneca);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, lecturaComposicionCorporal);
    }
    
}
