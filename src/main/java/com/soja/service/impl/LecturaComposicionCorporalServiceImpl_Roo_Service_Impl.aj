// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.soja.service.impl;

import com.soja.domain.LecturaComposicionCorporal;
import com.soja.domain.Persona;
import com.soja.repository.LecturaComposicionCorporalRepository;
import com.soja.service.impl.LecturaComposicionCorporalServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LecturaComposicionCorporalServiceImpl_Roo_Service_Impl {
    
    declare @type: LecturaComposicionCorporalServiceImpl: @Service;
    
    declare @type: LecturaComposicionCorporalServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LecturaComposicionCorporalRepository LecturaComposicionCorporalServiceImpl.lecturaComposicionCorporalRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param lecturaComposicionCorporalRepository
     */
    @Autowired
    public LecturaComposicionCorporalServiceImpl.new(LecturaComposicionCorporalRepository lecturaComposicionCorporalRepository) {
        setLecturaComposicionCorporalRepository(lecturaComposicionCorporalRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return LecturaComposicionCorporalRepository
     */
    public LecturaComposicionCorporalRepository LecturaComposicionCorporalServiceImpl.getLecturaComposicionCorporalRepository() {
        return lecturaComposicionCorporalRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param lecturaComposicionCorporalRepository
     */
    public void LecturaComposicionCorporalServiceImpl.setLecturaComposicionCorporalRepository(LecturaComposicionCorporalRepository lecturaComposicionCorporalRepository) {
        this.lecturaComposicionCorporalRepository = lecturaComposicionCorporalRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param lecturacomposicioncorporal
     * @return Map
     */
    public Map<String, List<MessageI18n>> LecturaComposicionCorporalServiceImpl.validate(LecturaComposicionCorporal lecturacomposicioncorporal) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param lecturaComposicionCorporal
     */
    @Transactional
    public void LecturaComposicionCorporalServiceImpl.delete(LecturaComposicionCorporal lecturaComposicionCorporal) {
        // Clear bidirectional many-to-one child relationship with Persona
        if (lecturaComposicionCorporal.getPersona() != null) {
            lecturaComposicionCorporal.getPersona().getLecturaComposicionCorporal().remove(lecturaComposicionCorporal);
        }
        
        getLecturaComposicionCorporalRepository().delete(lecturaComposicionCorporal);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<LecturaComposicionCorporal> LecturaComposicionCorporalServiceImpl.save(Iterable<LecturaComposicionCorporal> entities) {
        return getLecturaComposicionCorporalRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void LecturaComposicionCorporalServiceImpl.delete(Iterable<Long> ids) {
        List<LecturaComposicionCorporal> toDelete = getLecturaComposicionCorporalRepository().findAll(ids);
        getLecturaComposicionCorporalRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return LecturaComposicionCorporal
     */
    @Transactional
    public LecturaComposicionCorporal LecturaComposicionCorporalServiceImpl.save(LecturaComposicionCorporal entity) {
        return getLecturaComposicionCorporalRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return LecturaComposicionCorporal
     */
    public LecturaComposicionCorporal LecturaComposicionCorporalServiceImpl.findOne(Long id) {
        return getLecturaComposicionCorporalRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return LecturaComposicionCorporal
     */
    public LecturaComposicionCorporal LecturaComposicionCorporalServiceImpl.findOneForUpdate(Long id) {
        return getLecturaComposicionCorporalRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<LecturaComposicionCorporal> LecturaComposicionCorporalServiceImpl.findAll(Iterable<Long> ids) {
        return getLecturaComposicionCorporalRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<LecturaComposicionCorporal> LecturaComposicionCorporalServiceImpl.findAll() {
        return getLecturaComposicionCorporalRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long LecturaComposicionCorporalServiceImpl.count() {
        return getLecturaComposicionCorporalRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LecturaComposicionCorporal> LecturaComposicionCorporalServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getLecturaComposicionCorporalRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LecturaComposicionCorporal> LecturaComposicionCorporalServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getLecturaComposicionCorporalRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param persona
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LecturaComposicionCorporal> LecturaComposicionCorporalServiceImpl.findByPersona(Persona persona, GlobalSearch globalSearch, Pageable pageable) {
        return getLecturaComposicionCorporalRepository().findByPersona(persona, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param persona
     * @return Long
     */
    public long LecturaComposicionCorporalServiceImpl.countByPersona(Persona persona) {
        return getLecturaComposicionCorporalRepository().countByPersona(persona);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<LecturaComposicionCorporal> LecturaComposicionCorporalServiceImpl.getEntityType() {
        return LecturaComposicionCorporal.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> LecturaComposicionCorporalServiceImpl.getIdType() {
        return Long.class;
    }
    
}
