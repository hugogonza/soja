// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.soja.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.soja.domain.ExamenGeneralOrina;
import com.soja.domain.Persona;
import com.soja.domain.QExamenGeneralOrina;
import com.soja.repository.ExamenGeneralOrinaRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ExamenGeneralOrinaRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ExamenGeneralOrinaRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.PERSONA = "persona";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.FECHA = "fecha";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.COLOR = "Color";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.ASPECTO = "Aspecto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.PH = "ph";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.DENSIDAD = "densidad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.PROTEINAS = "proteinas";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.HEMOGLOBINA = "hemoglobina";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.GLUCOSA = "glucosa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.UROBILINOGENO = "urobilinogeno";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.BILIRRUBINA = "bilirrubina";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CUERPOS___CETONICOS = "cuerpos_cetonicos";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.NITRITOS = "nitritos";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.LEUCOCITOS = "leucocitos";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CELULAS___EPITELIALES___A = "celulas_epiteliales_a";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CELULAS___EPITELIALES___B = "celulas_epiteliales_b";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.LEUCOCITOS___A = "leucocitos_a";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.LEUCOCITOS___B = "leucocitos_b";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.ERITROCITOS___A = "eritrocitos_a";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.ERITROCITOS___B = "eritrocitos_b";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CILINDROS___HIALINOS___A = "cilindros_hialinos_a";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CILINDROS___HIALINOS___B = "cilindros_hialinos_b";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CILINDROS___EPITELIALES___A = "cilindros_epiteliales_a";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CILINDROS___EPITELIALES___B = "cilindros_epiteliales_b";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.TIPO___CRISTALES = "tipo_cristales";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.CRISTALES___CANTIDAD = "cristales_cantidad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.LEVADURAS = "levaduras";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExamenGeneralOrinaRepositoryImpl.BACTERIAS = "bacterias";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ExamenGeneralOrina> ExamenGeneralOrinaRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QExamenGeneralOrina examenGeneralOrina = QExamenGeneralOrina.examenGeneralOrina;
        
        JPQLQuery<ExamenGeneralOrina> query = from(examenGeneralOrina);
        
        Path<?>[] paths = new Path<?>[] {examenGeneralOrina.persona,examenGeneralOrina.fecha,examenGeneralOrina.Color,examenGeneralOrina.Aspecto,examenGeneralOrina.ph,examenGeneralOrina.densidad,examenGeneralOrina.proteinas,examenGeneralOrina.hemoglobina,examenGeneralOrina.glucosa,examenGeneralOrina.urobilinogeno,examenGeneralOrina.bilirrubina,examenGeneralOrina.cuerpos_cetonicos,examenGeneralOrina.nitritos,examenGeneralOrina.leucocitos,examenGeneralOrina.celulas_epiteliales_a,examenGeneralOrina.celulas_epiteliales_b,examenGeneralOrina.leucocitos_a,examenGeneralOrina.leucocitos_b,examenGeneralOrina.eritrocitos_a,examenGeneralOrina.eritrocitos_b,examenGeneralOrina.cilindros_hialinos_a,examenGeneralOrina.cilindros_hialinos_b,examenGeneralOrina.cilindros_epiteliales_a,examenGeneralOrina.cilindros_epiteliales_b,examenGeneralOrina.tipo_cristales,examenGeneralOrina.cristales_cantidad,examenGeneralOrina.levaduras,examenGeneralOrina.bacterias};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PERSONA, examenGeneralOrina.persona)
			.map(FECHA, examenGeneralOrina.fecha)
			.map(COLOR, examenGeneralOrina.Color)
			.map(ASPECTO, examenGeneralOrina.Aspecto)
			.map(PH, examenGeneralOrina.ph)
			.map(DENSIDAD, examenGeneralOrina.densidad)
			.map(PROTEINAS, examenGeneralOrina.proteinas)
			.map(HEMOGLOBINA, examenGeneralOrina.hemoglobina)
			.map(GLUCOSA, examenGeneralOrina.glucosa)
			.map(UROBILINOGENO, examenGeneralOrina.urobilinogeno)
			.map(BILIRRUBINA, examenGeneralOrina.bilirrubina)
			.map(CUERPOS___CETONICOS, examenGeneralOrina.cuerpos_cetonicos)
			.map(NITRITOS, examenGeneralOrina.nitritos)
			.map(LEUCOCITOS, examenGeneralOrina.leucocitos)
			.map(CELULAS___EPITELIALES___A, examenGeneralOrina.celulas_epiteliales_a)
			.map(CELULAS___EPITELIALES___B, examenGeneralOrina.celulas_epiteliales_b)
			.map(LEUCOCITOS___A, examenGeneralOrina.leucocitos_a)
			.map(LEUCOCITOS___B, examenGeneralOrina.leucocitos_b)
			.map(ERITROCITOS___A, examenGeneralOrina.eritrocitos_a)
			.map(ERITROCITOS___B, examenGeneralOrina.eritrocitos_b)
			.map(CILINDROS___HIALINOS___A, examenGeneralOrina.cilindros_hialinos_a)
			.map(CILINDROS___HIALINOS___B, examenGeneralOrina.cilindros_hialinos_b)
			.map(CILINDROS___EPITELIALES___A, examenGeneralOrina.cilindros_epiteliales_a)
			.map(CILINDROS___EPITELIALES___B, examenGeneralOrina.cilindros_epiteliales_b)
			.map(TIPO___CRISTALES, examenGeneralOrina.tipo_cristales)
			.map(CRISTALES___CANTIDAD, examenGeneralOrina.cristales_cantidad)
			.map(LEVADURAS, examenGeneralOrina.levaduras)
			.map(BACTERIAS, examenGeneralOrina.bacterias);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, examenGeneralOrina);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ExamenGeneralOrina> ExamenGeneralOrinaRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QExamenGeneralOrina examenGeneralOrina = QExamenGeneralOrina.examenGeneralOrina;
        
        JPQLQuery<ExamenGeneralOrina> query = from(examenGeneralOrina);
        
        Path<?>[] paths = new Path<?>[] {examenGeneralOrina.persona,examenGeneralOrina.fecha,examenGeneralOrina.Color,examenGeneralOrina.Aspecto,examenGeneralOrina.ph,examenGeneralOrina.densidad,examenGeneralOrina.proteinas,examenGeneralOrina.hemoglobina,examenGeneralOrina.glucosa,examenGeneralOrina.urobilinogeno,examenGeneralOrina.bilirrubina,examenGeneralOrina.cuerpos_cetonicos,examenGeneralOrina.nitritos,examenGeneralOrina.leucocitos,examenGeneralOrina.celulas_epiteliales_a,examenGeneralOrina.celulas_epiteliales_b,examenGeneralOrina.leucocitos_a,examenGeneralOrina.leucocitos_b,examenGeneralOrina.eritrocitos_a,examenGeneralOrina.eritrocitos_b,examenGeneralOrina.cilindros_hialinos_a,examenGeneralOrina.cilindros_hialinos_b,examenGeneralOrina.cilindros_epiteliales_a,examenGeneralOrina.cilindros_epiteliales_b,examenGeneralOrina.tipo_cristales,examenGeneralOrina.cristales_cantidad,examenGeneralOrina.levaduras,examenGeneralOrina.bacterias};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(examenGeneralOrina.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PERSONA, examenGeneralOrina.persona)
			.map(FECHA, examenGeneralOrina.fecha)
			.map(COLOR, examenGeneralOrina.Color)
			.map(ASPECTO, examenGeneralOrina.Aspecto)
			.map(PH, examenGeneralOrina.ph)
			.map(DENSIDAD, examenGeneralOrina.densidad)
			.map(PROTEINAS, examenGeneralOrina.proteinas)
			.map(HEMOGLOBINA, examenGeneralOrina.hemoglobina)
			.map(GLUCOSA, examenGeneralOrina.glucosa)
			.map(UROBILINOGENO, examenGeneralOrina.urobilinogeno)
			.map(BILIRRUBINA, examenGeneralOrina.bilirrubina)
			.map(CUERPOS___CETONICOS, examenGeneralOrina.cuerpos_cetonicos)
			.map(NITRITOS, examenGeneralOrina.nitritos)
			.map(LEUCOCITOS, examenGeneralOrina.leucocitos)
			.map(CELULAS___EPITELIALES___A, examenGeneralOrina.celulas_epiteliales_a)
			.map(CELULAS___EPITELIALES___B, examenGeneralOrina.celulas_epiteliales_b)
			.map(LEUCOCITOS___A, examenGeneralOrina.leucocitos_a)
			.map(LEUCOCITOS___B, examenGeneralOrina.leucocitos_b)
			.map(ERITROCITOS___A, examenGeneralOrina.eritrocitos_a)
			.map(ERITROCITOS___B, examenGeneralOrina.eritrocitos_b)
			.map(CILINDROS___HIALINOS___A, examenGeneralOrina.cilindros_hialinos_a)
			.map(CILINDROS___HIALINOS___B, examenGeneralOrina.cilindros_hialinos_b)
			.map(CILINDROS___EPITELIALES___A, examenGeneralOrina.cilindros_epiteliales_a)
			.map(CILINDROS___EPITELIALES___B, examenGeneralOrina.cilindros_epiteliales_b)
			.map(TIPO___CRISTALES, examenGeneralOrina.tipo_cristales)
			.map(CRISTALES___CANTIDAD, examenGeneralOrina.cristales_cantidad)
			.map(LEVADURAS, examenGeneralOrina.levaduras)
			.map(BACTERIAS, examenGeneralOrina.bacterias);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, examenGeneralOrina);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param persona
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ExamenGeneralOrina> ExamenGeneralOrinaRepositoryImpl.findByPersona(Persona persona, GlobalSearch globalSearch, Pageable pageable) {
        
        QExamenGeneralOrina examenGeneralOrina = QExamenGeneralOrina.examenGeneralOrina;
        
        JPQLQuery<ExamenGeneralOrina> query = from(examenGeneralOrina);
        
        Assert.notNull(persona, "persona is required");
        
        query.where(examenGeneralOrina.persona.eq(persona));
        Path<?>[] paths = new Path<?>[] {examenGeneralOrina.persona,examenGeneralOrina.fecha,examenGeneralOrina.Color,examenGeneralOrina.Aspecto,examenGeneralOrina.ph,examenGeneralOrina.densidad,examenGeneralOrina.proteinas,examenGeneralOrina.hemoglobina,examenGeneralOrina.glucosa,examenGeneralOrina.urobilinogeno,examenGeneralOrina.bilirrubina,examenGeneralOrina.cuerpos_cetonicos,examenGeneralOrina.nitritos,examenGeneralOrina.leucocitos,examenGeneralOrina.celulas_epiteliales_a,examenGeneralOrina.celulas_epiteliales_b,examenGeneralOrina.leucocitos_a,examenGeneralOrina.leucocitos_b,examenGeneralOrina.eritrocitos_a,examenGeneralOrina.eritrocitos_b,examenGeneralOrina.cilindros_hialinos_a,examenGeneralOrina.cilindros_hialinos_b,examenGeneralOrina.cilindros_epiteliales_a,examenGeneralOrina.cilindros_epiteliales_b,examenGeneralOrina.tipo_cristales,examenGeneralOrina.cristales_cantidad,examenGeneralOrina.levaduras,examenGeneralOrina.bacterias};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PERSONA, examenGeneralOrina.persona)
			.map(FECHA, examenGeneralOrina.fecha)
			.map(COLOR, examenGeneralOrina.Color)
			.map(ASPECTO, examenGeneralOrina.Aspecto)
			.map(PH, examenGeneralOrina.ph)
			.map(DENSIDAD, examenGeneralOrina.densidad)
			.map(PROTEINAS, examenGeneralOrina.proteinas)
			.map(HEMOGLOBINA, examenGeneralOrina.hemoglobina)
			.map(GLUCOSA, examenGeneralOrina.glucosa)
			.map(UROBILINOGENO, examenGeneralOrina.urobilinogeno)
			.map(BILIRRUBINA, examenGeneralOrina.bilirrubina)
			.map(CUERPOS___CETONICOS, examenGeneralOrina.cuerpos_cetonicos)
			.map(NITRITOS, examenGeneralOrina.nitritos)
			.map(LEUCOCITOS, examenGeneralOrina.leucocitos)
			.map(CELULAS___EPITELIALES___A, examenGeneralOrina.celulas_epiteliales_a)
			.map(CELULAS___EPITELIALES___B, examenGeneralOrina.celulas_epiteliales_b)
			.map(LEUCOCITOS___A, examenGeneralOrina.leucocitos_a)
			.map(LEUCOCITOS___B, examenGeneralOrina.leucocitos_b)
			.map(ERITROCITOS___A, examenGeneralOrina.eritrocitos_a)
			.map(ERITROCITOS___B, examenGeneralOrina.eritrocitos_b)
			.map(CILINDROS___HIALINOS___A, examenGeneralOrina.cilindros_hialinos_a)
			.map(CILINDROS___HIALINOS___B, examenGeneralOrina.cilindros_hialinos_b)
			.map(CILINDROS___EPITELIALES___A, examenGeneralOrina.cilindros_epiteliales_a)
			.map(CILINDROS___EPITELIALES___B, examenGeneralOrina.cilindros_epiteliales_b)
			.map(TIPO___CRISTALES, examenGeneralOrina.tipo_cristales)
			.map(CRISTALES___CANTIDAD, examenGeneralOrina.cristales_cantidad)
			.map(LEVADURAS, examenGeneralOrina.levaduras)
			.map(BACTERIAS, examenGeneralOrina.bacterias);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, examenGeneralOrina);
    }
    
}
